<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: Helvetica Neue, Helvetica, Arial, sans-serif;
      background: #FFFFFF;
      min-height: 100vh;
      padding: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .container {
      width: 100%;
      max-width: 1600px;
      margin: 0 auto;
    }

    h1 {
      text-align: center;
      color: #003A70;
      font-size: 3rem;
      margin-bottom: 1rem;
      font-weight: 700;
    }

    .status {
      text-align: center;
      margin-bottom: 2rem;
      font-size: 1.125rem;
      font-weight: 600;
      padding: 0.75rem;
      border-radius: 8px;
      background: #F5F5F5;
    }

    .status.live {
      color: #008A52;
      background: #E8F5E9;
    }

    .status.paused {
      color: #FF6B6B;
      background: #FFE5E5;
    }

    .leaderboard {
      background: #FFFFFF;
      border-radius: 12px;
      padding: 2rem;
      box-shadow: 0 2px 8px rgba(0, 102, 204, 0.1);
      border: 4px solid #005BAA;
    }

    #leaderboard-content {
      transition: opacity 0.3s ease;
    }

    #leaderboard-content.updating {
      opacity: 0.7;
    }

    .table-header {
      display: grid;
      grid-template-columns: 100px 1fr 200px 200px;
      gap: 1.5rem;
      padding: 1rem 1.5rem;
      background: #F5F5F5;
      border-radius: 8px;
      font-weight: 600;
      color: #424242;
      margin-bottom: 0.5rem;
      font-size: 1rem;
    }

    .table-row {
      display: grid;
      grid-template-columns: 100px 1fr 200px 200px;
      gap: 1.5rem;
      padding: 1.5rem;
      border-bottom: 1px solid #E8E8E8;
      transition: all 0.3s ease;
      align-items: center;
      animation: fadeIn 0.3s ease-in;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .table-row:hover {
      background: #F5F5F5;
      transform: translateY(-2px);
    }

    .table-row:last-child {
      border-bottom: none;
    }

    .rank {
      font-size: 2.5rem;
      font-weight: 700;
      text-align: center;
      color: #424242;
    }

    .rank-1 {
      color: #FFD700;
      text-shadow: 2px 2px 4px rgba(255, 215, 0, 0.3);
    }

    .rank-2 {
      color: #C0C0C0;
      text-shadow: 2px 2px 4px rgba(192, 192, 192, 0.3);
    }

    .rank-3 {
      color: #CD7F32;
      text-shadow: 2px 2px 4px rgba(205, 127, 50, 0.3);
    }

    .table-name {
      font-size: 1.75rem;
      font-weight: 600;
      color: #003A70;
    }

    .score {
      font-size: 2rem;
      font-weight: 700;
      color: #0066CC;
      text-align: center;
    }

    .questions {
      font-size: 1.125rem;
      color: #424242;
      text-align: center;
      font-weight: 500;
    }

    .no-data {
      text-align: center;
      padding: 4rem 2rem;
      color: #9E9E9E;
      font-size: 1.5rem;
    }

    .paused-message {
      text-align: center;
      padding: 4rem 2rem;
      color: #FF6B6B;
      font-size: 1.75rem;
      font-weight: 600;
    }

    .last-updated {
      text-align: center;
      color: #9E9E9E;
      margin-top: 1.5rem;
      font-size: 0.875rem;
    }

    /* 16:9 Optimizations for projection */
    @media (min-aspect-ratio: 16/9) {
      body {
        padding: 1.5rem 3rem;
      }

      h1 {
        font-size: 3.5rem;
        margin-bottom: 1.5rem;
      }

      .leaderboard {
        padding: 2.5rem;
      }

      .table-header {
        font-size: 1.125rem;
        padding: 1.25rem 2rem;
      }

      .table-row {
        padding: 2rem;
      }

      .rank {
        font-size: 3rem;
      }

      .table-name {
        font-size: 2rem;
      }

      .score {
        font-size: 2.25rem;
      }

      .questions {
        font-size: 1.25rem;
      }
    }

    /* Smaller screens */
    @media (max-width: 1200px) {
      .table-header,
      .table-row {
        grid-template-columns: 80px 1fr 150px 150px;
        gap: 1rem;
      }

      .rank {
        font-size: 2rem;
      }

      .table-name {
        font-size: 1.5rem;
      }

      .score {
        font-size: 1.75rem;
      }

      .questions {
        font-size: 1rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>üèÜ Quiz Leaderboard</h1>
    <div class="status" id="status"></div>
    <div class="leaderboard">
      <div class="table-header">
        <div>Rank</div>
        <div>Table</div>
        <div>Total Score</div>
        <div>Questions</div>
      </div>
      <div id="leaderboard-content">
        <div class="no-data">Loading...</div>
      </div>
    </div>
    <div class="last-updated" id="last-updated"></div>
  </div>

  <script>
    let cachedData = null;
    let isLoading = false; // Prevent overlapping requests
    let pollInterval = null;
    let lastDataHash = null; // Track if data actually changed

    // Simple hash function to detect data changes
    function hashData(data) {
      if (!data || data.length === 0) return 'empty';
      return data.map(row =>
        `${row.rank}-${row.tableNumber}-${row.totalScore}-${row.questionsAnswered}`
      ).join('|');
    }

    function loadLeaderboard() {
      // Prevent overlapping requests
      if (isLoading) return;

      isLoading = true;
      google.script.run
        .withSuccessHandler(data => {
          isLoading = false;
          handleLeaderboardData(data);
        })
        .withFailureHandler(error => {
          isLoading = false;
          showError(error);
        })
        .getLeaderboardData();
    }

    function handleLeaderboardData(response) {
      const statusEl = document.getElementById('status');

      if (response.paused) {
        statusEl.textContent = '‚è∏ Updates Paused';
        statusEl.className = 'status paused';

        if (cachedData && cachedData.length > 0) {
          // Don't update display, keep showing cached data
          updateTimestamp();
        } else {
          const content = document.getElementById('leaderboard-content');
          content.innerHTML = '<div class="paused-message">Leaderboard updates paused</div>';
          updateTimestamp();
        }
        return;
      }

      statusEl.textContent = 'üî¥ Live';
      statusEl.className = 'status live';

      // Check if data actually changed
      const newHash = hashData(response.data);
      if (newHash !== lastDataHash) {
        lastDataHash = newHash;
        cachedData = response.data;
        displayLeaderboard(response.data);
      } else {
        // Data hasn't changed, just update timestamp
        updateTimestamp();
      }
    }

    function displayLeaderboard(data) {
      const content = document.getElementById('leaderboard-content');

      if (!data || data.length === 0) {
        content.innerHTML = '<div class="no-data">No scores yet. Waiting for submissions...</div>';
        updateTimestamp();
        return;
      }

      // Optimize HTML generation using array.map() and join()
      const html = data.map(row => {
        const rankClass = row.rank <= 3 ? `rank-${row.rank}` : '';
        return `
          <div class="table-row">
            <div class="rank ${rankClass}">${row.rank}</div>
            <div class="table-name">Table ${row.tableNumber}</div>
            <div class="score">${row.totalScore.toFixed(2)}</div>
            <div class="questions">${row.questionsAnswered} questions</div>
          </div>
        `;
      }).join('');

      content.innerHTML = html;
      updateTimestamp();
    }

    function updateTimestamp() {
      const now = new Date();
      document.getElementById('last-updated').textContent =
        'Last updated: ' + now.toLocaleTimeString();
    }

    function showError(error) {
      const content = document.getElementById('leaderboard-content');
      const statusEl = document.getElementById('status');

      content.innerHTML = '<div class="no-data">Error loading leaderboard: ' + (error.message || 'Unknown error') + '</div>';
      statusEl.textContent = '‚ö† Connection Error';
      statusEl.className = 'status paused';

      updateTimestamp();
    }

    function startPolling() {
      // Clear any existing polling interval
      if (pollInterval) clearInterval(pollInterval);

      // Initial load
      loadLeaderboard();

      // Poll for updates every 5 seconds
      // The isLoading flag prevents overlapping requests
      pollInterval = setInterval(loadLeaderboard, 5000);
    }

    // Start the application
    startPolling();
  </script>
</body>
</html>