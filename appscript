function doGet(e) {
  var page = e.parameter.page || 'quiz';
  
  if (page === 'leaderboard') {
    var template = HtmlService.createTemplateFromFile('Leaderboard');
    return template.evaluate()
      .setTitle('Quiz Leaderboard')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  } else {
    var template = HtmlService.createTemplateFromFile('Index');
    template.tableNumber = e.parameter.table || '';
    return template.evaluate()
      .setTitle('Quiz System')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }
}

function getRoundData() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var controlSheet = ss.getSheetByName('Control');

  // Batch read control values in one call
  var controlValues = controlSheet.getRange('B1:B5').getValues();
  var currentRound = controlValues[0][0];
  var timeLimit = controlValues[2][0];
  var quizActive = controlValues[4][0];

  if (!quizActive || !currentRound) {
    return { active: false };
  }

  // Calculate question IDs for this round (4 questions per round)
  var startQuestionId = ((currentRound - 1) * 4) + 1;

  // Fetch only the 4 rows needed for this round (assuming question IDs match row numbers)
  // Row 1 is header, so question ID 1 is in row 2
  var startRow = startQuestionId + 1;
  var questionsSheet = ss.getSheetByName('Questions');

  // Get only the 4 rows needed (12 columns: ID + text + 5 answer/point pairs)
  var questionData = questionsSheet.getRange(startRow, 1, 4, 12).getValues();

  var roundQuestions = [];
  for (var i = 0; i < questionData.length; i++) {
    roundQuestions.push({
      id: questionData[i][0],
      text: questionData[i][1],
      answerA: questionData[i][2],
      pointsA: questionData[i][3],
      answerB: questionData[i][4],
      pointsB: questionData[i][5],
      answerC: questionData[i][6],
      pointsC: questionData[i][7],
      answerD: questionData[i][8],
      pointsD: questionData[i][9],
      answerE: questionData[i][10],
      pointsE: questionData[i][11]
    });
  }

  // No sorting needed - data is already in correct order

  return {
    active: true,
    round: currentRound,
    questions: roundQuestions,
    timeLimit: timeLimit
  };
}

function submitAnswer(tableNumber, questionId, answerLetter) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var responsesSheet = ss.getSheetByName('Responses');
  var questionsSheet = ss.getSheetByName('Questions');

  // Map answer letters to column indices for points
  var pointsIndex = {'A': 3, 'B': 5, 'C': 7, 'D': 9, 'E': 11};
  var columnIndex = pointsIndex[answerLetter];

  if (!columnIndex) {
    return { success: false, message: 'Invalid answer letter', points: 0 };
  }

  // Direct lookup: question ID matches row number (row 1 is header, so question 1 is row 2)
  var questionRow = parseInt(questionId) + 1;

  // Fetch only the specific cell with the points value
  var points = questionsSheet.getRange(questionRow, columnIndex + 1).getValue() || 0;

  // Write submission
  var timestamp = new Date();
  responsesSheet.appendRow([timestamp, tableNumber, questionId, answerLetter, points]);

  return { success: true, message: 'Answer submitted!', points: points };
}

function getLeaderboardData() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var controlSheet = ss.getSheetByName('Control');

  var leaderboardLive = controlSheet.getRange('B7').getValue();

  if (!leaderboardLive) {
    return { paused: true };
  }

  var leaderboardSheet = ss.getSheetByName('Leaderboard');
  var data = leaderboardSheet.getRange('A2:D21').getValues();

  var leaderboard = [];
  for (var i = 0; i < data.length; i++) {
    // Only include rows with activity (score or answers)
    if (data[i][2] > 0 || data[i][3] > 0) {
      leaderboard.push({
        rank: data[i][0],
        tableNumber: data[i][1],
        totalScore: data[i][2],
        questionsAnswered: data[i][3]
      });
    }
  }

  // No sorting needed - data should already be sorted by rank in the sheet

  return { paused: false, data: leaderboard };
}
