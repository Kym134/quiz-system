<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <style>
    /* Color Palette */
    :root {
      --main-blue: #005BAA; /* Deep Corporate Blue */
      --darker-blue: #023F88;
      --light-green: #89BA17; /* Action Green */
      --dark-green: #00A656;
      --light-blue-accent: #00B3ED; /* Light Blue Accent */
      --dark-grey-text: #4D4F53;
      --light-background: #F8F8F8;
      --subtle-blue-tint: #F0F8FF; 
      --selected-border: #00B3ED; /* Use Light Blue for the selected border as seen in image */
    }

    /* ---------------------------------- */
    /* GLOBAL & CONTAINER STYLING */
    /* ---------------------------------- */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      /* Soft gradient background to match the visual tone */
      font-family: helvetica Neue, helvetica, Arial, sans-serif;
      background: linear-gradient(135deg, #E0E5F0 0%, #FAFAFA 100%);
      min-height: 100vh;
      padding: 2rem;
    }

    .container {
      max-width: 900px;
      margin: 0 auto;
      background: #FFFFFF;
      /* Softly rounded corners for the card look */
      border-radius: 12px; 
      padding: 0; /* Adjusting padding to be relative to content flow */
      /* Refined ambient shadow for the floating effect */
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1), 0 0 0 1px rgba(0, 91, 170, 0.05);
      border: none;
      overflow: hidden; /* Contains the header bar */
    }

    /* ---------------------------------- */
    /* HEADER BAR & LOGO */
    /* ---------------------------------- */
    .header-bar {
        display: flex;
        justify-content: space-between; 
        align-items: center;
        /* Matches the deep blue banner look in the image */
        background: linear-gradient(90deg, #1C67B6 0%, var(--darker-blue) 100%);
        padding: 0.75rem 1.5rem;
        position: relative;
        overflow: hidden;
    }
    
    /* Removed .logo-container and its styles as requested */

    .table-badge {
      display: inline-block;
      text-transform: uppercase;}
.cssbuttons-io-button {
  display: flex;
  align-items: center;
  font-family: inherit;
  cursor: pointer;
  font-weight: 500;
  font-size: 16px;
  padding: 0.7em 1.4em 0.7em 1.1em;
  color: white;
  background: #ad5389;
  background: linear-gradient(
    0deg,
     #00B3ED 0%,
    #023F88 100%
  );
  border: none;
  box-shadow: 0 0.7em 1.5em -0.5em #4D4F53;
  letter-spacing: 0.05em;
  border-radius: 15px;
}

.cssbuttons-io-button svg {
  margin-right: 6px;
}

.cssbuttons-io-button:hover {
  box-shadow: 0 0.5em 1.5em -0.5em #14a73e98;
}

.cssbuttons-io-button:active {
  box-shadow: 0 0.3em 1em -0.5em #14a73e98;
}

      

    /* Content Area Padding */
    .content-area {
        padding: 1.5rem 2.5rem;
    }

    /* ---------------------------------- */
    /* QUIZ FLOW ELEMENTS */
    /* ---------------------------------- */
    .round-progress {
      text-align: center;
      color: var(--dark-grey-text);
      margin-bottom: 1.5rem;
      font-size: 0.875rem;
      font-weight: 600;
      padding: 0.75rem;
      background: var(--light-background); 
      border-radius: 6px;
      border: 1px solid #EAEAEA;
    }

    .timer {
      text-align: center;
      font-size: 3.8rem;
      font-weight: 800;
      color: var(--main-blue); /* Text color looks more blue in the image */
      margin: 1rem 0;
      padding: 1rem 1rem;
      background: #FFFFFF;
      /* Image Style: Prominent border with strong shadow */
      border: 3px solid var(--selected-border); 
      box-shadow: 0 0 0 5px rgba(0, 179, 237, 0.1); /* Light Blue outside glow */
      border-radius: 8px; /* Slightly less rounded than container */
      transition: all 0.3s ease;
      letter-spacing: 2px;
    }

    .timer.warning {
      color: var(--yellow);
      border-color: var(--yellow);
      animation: pulse 1s infinite;
      box-shadow: 0 0 0 5px rgba(255, 233, 0, 0.3);
    }

    @keyframes pulse {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.01); }
    }


    .question {
      font-size: 1.25rem; /* Adjusted for visual match */
      font-weight: 600;
      color: var(--dark-grey-text);
      line-height: 1.6;
      padding-bottom: 1.5rem;
      /* Image Style: Simple horizontal rule */
      border-bottom: 1px solid #E0E0E0;
      margin-bottom: 2rem;
    }

    /* ---------------------------------- */
    /* ANSWER BUTTONS (IDEAL UX) */
    /* ---------------------------------- */
    .answer-btn {
      display: flex;
      align-items: flex-start;
      gap: 1rem;
      width: 100%;
      padding: 1.2rem 1.5rem;
      margin: 1rem 0;
      background: #FFFFFF;
      color: var(--dark-grey-text);
      /* Minimalist default state */
      border: 1px solid #E0E0E0; 
      border-radius: 8px;
      cursor: pointer;
      font-size: 1rem;
      text-align: left;
      transition: all 0.2s ease;
      font-weight: 500;
      line-height: 1.4;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03); 
      position: relative;
    }

    .answer-btn:hover:not(:disabled) {
      border-color: var(--light-blue-accent); 
      box-shadow: 0 4px 10px rgba(0, 179, 237, 0.1);
    }

    /* SELECTED STATE - As per image */
    .answer-btn.selected {
      border: 1px solid var(--selected-border); /* Thicker border not required, just the accent color */
      background: var(--subtle-blue-tint);
      font-weight: 600;
      box-shadow: 0 4px 10px rgba(0, 91, 170, 0.08);
    }

    .answer-btn:disabled {
      opacity: 0.7;
      cursor: not-allowed;
      background: var(--light-background);
    }

    .answer-radio {
      display: none; 
    }
    
    /* CUSTOM CHECKMARK - Matches the image style */
    .answer-btn.selected::after {
        content: '✓';
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        font-size: 1.4rem;
        font-weight: 700;
        color: var(--light-green);
        /* Simple circle background for the checkmark */
        background: #FFFFFF;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    

    /* Option Letter Emphasis */
    .answer-btn span strong {
        color: var(--dark-grey-text); /* Looks like regular text color in the image */
        margin-right: 5px;
    }

    /* Change color of letter prefix when option is selected */
    .answer-btn.selected span strong {
        color: var(--dark-grey-text); /* Looks like the text remains dark grey */
    }

    /* ---------------------------------- */
    /* SUBMIT BUTTON - Matches the 3D Gradient Look */
    /* ---------------------------------- */
    .submit-btn {
      width: 100%;
      padding: 1.1rem 2rem;
      /* Gradient matches the image look */
      background: linear-gradient(180deg, var(--light-green) 0%, var(--dark-green) 100%);
      color: #FFFFFF;
      border: none;
      /* Rounded corners match the image */
      border-radius: 8px; 
      font-size: 1.1rem;
      font-weight: 700;
      cursor: pointer;
      margin-top: 2.5rem;
      /* Subtle 3D-style shadow */
      box-shadow: 0 4px 10px rgba(0, 166, 86, 0.4); 
      transition: all 0.2s ease;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .submit-btn:hover:not(:disabled) {
      /* Slightly darker hover gradient */
      background: linear-gradient(180deg, var(--dark-green) 0%, var(--light-green) 100%);
      box-shadow: 0 6px 15px rgba(0, 166, 86, 0.5); 
    }

    .submit-btn:disabled {
      background: #CCCCCC;
      cursor: not-allowed;
      opacity: 0.6;
      box-shadow: none;
    }

    /* ---------------------------------- */
    /* STATUS MESSAGES & RESPONSIVENESS (Minimal changes to integrate colors) */
    /* ---------------------------------- */
    /* (omitted for brevity, assume original styles apply) */

    @media (max-width: 768px) {
      /* ... (omitted for brevity, assume original styles apply) */
      .container {
        border-radius: 8px;
      }
      .content-area {
        padding: 1rem 1.5rem;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header-bar">
        <div class="table-badge cssbuttons-io-button">Table <?= tableNumber ?></div>
        </div>
    
    <div class="content-area" id="content-area">
        <div id="content">
            <div class="waiting">
                <div class="waiting-icon">⏳</div>
                <h3>Loading...</h3>
            </div>
        </div>
    </div>
  </div>

  <script>
    // --- START JAVASCRIPT CODE (Functionality remains unchanged) ---
    const tableNumber = '<?= tableNumber ?>';
    let currentRound = null;
    let roundQuestions = [];
    let currentQuestionIndex = 0;
    let selectedAnswer = null;
    let roundTimeRemaining = 0;
    let timerInterval = null;
    let roundStartTime = null;
    let isLoading = false; // Prevent overlapping requests
    let pollInterval = null;

    function loadRound() {
      // Prevent overlapping requests
      if (isLoading) return;

      isLoading = true;
      google.script.run
        .withSuccessHandler(data => {
          isLoading = false;
          handleRoundData(data);
        })
        .withFailureHandler(error => {
          isLoading = false;
          showError(error);
        })
        .getRoundData();
    }

    function handleRoundData(data) {
      const content = document.getElementById('content');

      // Handle null or undefined response
      if (!data) {
        content.innerHTML = `
          <div class="waiting">
            <div class="waiting-icon">⚠️</div>
            <h3>Connection Error</h3>
            <p>Unable to load quiz data. Retrying...</p>
          </div>
        `;
        return;
      }

      if (!data.active) {
        content.innerHTML = `
          <div class="waiting">
            <div class="waiting-icon">⏸️</div>
            <h3>Waiting for next round...</h3>
            <p>Stand by, the next question will appear shortly</p>
          </div>
        `;
        // Polling continues via main interval
        return;
      }

      if (!data.questions || data.questions.length === 0) {
        content.innerHTML = `
          <div class="waiting">
            <div class="waiting-icon">📝</div>
            <h3>No questions available</h3>
            <p>Waiting for questions to be loaded for this round</p>
          </div>
        `;
        return;
      }

      // Check if this is a new round - use loose equality to handle type differences
      // Convert both to strings for consistent comparison
      var newRound = String(data.round).trim();
      var oldRound = currentRound ? String(currentRound).trim() : null;

      if (oldRound !== newRound) {
        console.log('New round detected: ' + oldRound + ' -> ' + newRound);
        currentRound = data.round;
        roundQuestions = data.questions;
        currentQuestionIndex = 0;
        roundTimeRemaining = data.timeLimit;
        roundStartTime = Date.now();

        // Clear any existing timer
        if (timerInterval) {
          clearInterval(timerInterval);
        }

        startRoundTimer();
      }

      displayCurrentQuestion();
    }

    function displayCurrentQuestion() {
      const content = document.getElementById('content');

      // Ensure we have questions to display
      if (!roundQuestions || roundQuestions.length === 0) {
        content.innerHTML = `
          <div class="waiting">
            <div class="waiting-icon">📝</div>
            <h3>Loading questions...</h3>
            <p>Please wait</p>
          </div>
        `;
        return;
      }

      // Check if round is complete
      if (currentQuestionIndex >= roundQuestions.length) {
        clearInterval(timerInterval);
        content.innerHTML = `
          <div class="round-complete">
            <div class="round-complete-icon">🎉</div>
            <h2>Round Complete!</h2>
            <p>Waiting for next round...</p>
          </div>
        `;
        // Polling continues via main interval
        return;
      }

      // Check if time has run out
      if (roundTimeRemaining <= 0) {
        clearInterval(timerInterval);
        content.innerHTML = `
          <div class="round-complete">
            <div class="round-complete-icon">⏰</div>
            <h2>Time's Up!</h2>
            <p>Waiting for next round...</p>
          </div>
        `;
        // Polling continues via main interval
        return;
      }

      const question = roundQuestions[currentQuestionIndex];
      selectedAnswer = null;

      // Build answer buttons efficiently
      const answerButtons = ['A', 'B', 'C', 'D', 'E']
        .filter(letter => question['answer' + letter])
        .map(letter => `
          <button class="answer-btn" onclick="selectAnswer('${letter}', this)">
            <div class="answer-radio">
              <div class="answer-radio-inner"></div>
            </div>
            <span><strong>${letter}:</strong> ${question['answer' + letter]}</span>
          </button>
        `).join('');

      // Use template literal for cleaner, faster HTML generation
      // The warning class is applied based on remaining time
      content.innerHTML = `
        <div class="round-progress">Round ${currentRound} - Question ${currentQuestionIndex + 1} of ${roundQuestions.length}</div>
        <div class="timer${roundTimeRemaining <= 30 ? ' warning' : ''}" id="timer">${roundTimeRemaining}s</div>
        <div class="question">${question.text}</div>
        ${answerButtons}
        <button class="submit-btn" id="submitBtn" onclick="submitAnswer()" disabled>Submit Answer</button>
        <div id="message"></div>
      `;
    }

    function startRoundTimer() {
      if (timerInterval) clearInterval(timerInterval);

      timerInterval = setInterval(() => {
        roundTimeRemaining--;
        const timerEl = document.getElementById('timer');
        if (timerEl) {
          timerEl.textContent = roundTimeRemaining + 's';

          if (roundTimeRemaining <= 30) {
            timerEl.classList.add('warning');
          } else {
            // Ensure warning class is removed if time goes back up (e.g., new question loads)
            timerEl.classList.remove('warning');
          }

          if (roundTimeRemaining <= 0) {
            clearInterval(timerInterval);
            // Disable all interaction
            const answerBtns = document.querySelectorAll('.answer-btn');
            answerBtns.forEach(btn => btn.disabled = true);
            const submitBtn = document.getElementById('submitBtn');
            if (submitBtn) submitBtn.disabled = true;

            // Show time's up message after brief delay
            setTimeout(() => {
              const content = document.getElementById('content');
              content.innerHTML = `
                <div class="round-complete">
                  <div class="round-complete-icon">⏰</div>
                  <h2>Time's Up!</h2>
                  <p>Waiting for next round...</p>
                </div>
              `;
              // Polling continues via main interval - no extra setTimeout needed
            }, 2000);
          }
        }
      }, 1000);
    }

    function selectAnswer(letter, element) {
      if (roundTimeRemaining <= 0) return;
      selectedAnswer = letter;
      document.querySelectorAll('.answer-btn').forEach(btn => {
        btn.classList.remove('selected');
        // If using the ::after checkmark method, ensure you remove the checkmark on deselection (handled by class removal)
      });
      element.classList.add('selected');
      document.getElementById('submitBtn').disabled = false;
    }

    function submitAnswer() {
      if (!selectedAnswer || roundTimeRemaining <= 0) return;

      const currentQuestion = roundQuestions[currentQuestionIndex];
      const submitBtn = document.getElementById('submitBtn');
      const answerBtns = document.querySelectorAll('.answer-btn');

      // Disable all inputs during submission
      if (submitBtn) submitBtn.disabled = true;
      answerBtns.forEach(btn => btn.disabled = true);

      google.script.run
        .withSuccessHandler(handleSubmitResponse)
        .withFailureHandler(error => {
          // Re-enable on error
          if (submitBtn) submitBtn.disabled = false;
          answerBtns.forEach(btn => btn.disabled = false);
          showError(error);
        })
        .submitAnswer(tableNumber, currentQuestion.id, selectedAnswer);
    }

    function handleSubmitResponse(response) {
      if (response.success) {
        showMessage('Answer submitted!', 'success');

        // Move to next question after brief delay
        setTimeout(() => {
          currentQuestionIndex++;
          displayCurrentQuestion();
        }, 1000);
      } else {
        showMessage(response.message || 'Submission failed', 'error');
        // Re-enable buttons on failure
        const submitBtn = document.getElementById('submitBtn');
        const answerBtns = document.querySelectorAll('.answer-btn');
        if (submitBtn) submitBtn.disabled = false;
        answerBtns.forEach(btn => btn.disabled = false);
      }
    }

    function showMessage(msg, type) {
      const messageEl = document.getElementById('message');
      if (messageEl) {
        messageEl.className = 'message ' + type;
        messageEl.textContent = msg;
      }
    }

    function showError(error) {
      showMessage('Error: ' + (error.message || 'Unknown error'), 'error');
    }

    function startPolling() {
      // Clear any existing polling interval
      if (pollInterval) clearInterval(pollInterval);

      // Initial load
      loadRound();

      // Poll for updates every 10 seconds
      // The isLoading flag prevents overlapping requests
      pollInterval = setInterval(loadRound, 10000);
    }

    // Start the application
    startPolling();
    // --- END JAVASCRIPT CODE ---
  </script>
</body>
</html>